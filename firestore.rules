rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Check if the current user is the participant
    function userIsParticipant(name, participantData) {
      return name == participantData.name;
    }

    // Check if the request only changes the specified fields
    function onlyChanges(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }

    // Check if the request only creates the specified fields
    function onlyCreates(fields) {
      return request.resource.data.diff({}).affectedKeys().hasOnly(fields) && request.resource.data.diff({}).affectedKeys().hasAll(fields);
    }

    // Check if the data matches the meetup schema
    function isValidMeetup(meetupData) {
      let hasName = "name" in meetupData && meetupData.name is string;
      let hasCreatedAt = "createdAt" in meetupData && meetupData.createdAt is timestamp;

      // Check timeslots are Map<string, string[]>
      let hasAvailability = "availability" in meetupData && meetupData.availability is map;

      // todo: properly check the entire lists are homogeneous
      let availVals = meetupData.availability.values();
      let hasValidAvailability = hasAvailability && availVals.size() == 0 || (availVals[0] is list && (availVals[0].size() == 0 || availVals[0][0] is string));

      let hasTimeslots = "timeslots" in meetupData && meetupData.timeslots is map;
      let descVals = meetupData.timeslots.values();
      let hasValidTimeslots = hasTimeslots && descVals.size() == 0 || descVals[0] is string;

      // Check participantNames is string[]
      let hasParticipantNames = "participantNames" in meetupData && meetupData.participantNames is list;
      let hasValidParticipantNames = hasParticipantNames && meetupData.participantNames.size() == 0 || meetupData.participantNames[0] is string;

      return hasName && hasCreatedAt && hasValidAvailability && hasValidTimeslots && hasValidParticipantNames;
    }

    // Check if the data matches the participant schema
    function isValidParticipant(participantData) {
      let hasName = "name" in participantData && participantData.name is string;
      let hasCreatedAt = "createdAt" in participantData && participantData.createdAt is timestamp;
      
      // Check availability is a Map<string, string[]>
      let hasAvailability = "availability" in participantData && participantData.availability is map;

      let availVals = participantData.availability.values();
      let hasValidAvailability = hasAvailability && availVals.size() == 0 || (availVals[0] is list && (availVals[0].size() == 0 || availVals[0][0] is string));

      return hasName && hasCreatedAt && hasValidAvailability;
    }

    // Get the names of participants of a meetup
    function getParticipantNames(meetupId) {
      return get(/databases/$(database)/documents/meetups/$(meetupId)).data.participantNames;
    }

    match /meetups/{meetupId} {
      // Allow anyone to get meetups, but not list them
      allow get: if true;

      // Allow creation of meetups if
      // - the user is creating a new meetup
      // - the user is creating a valid meetup
      allow write: if !exists(/databases/$(database)/documents/users/$(request.resource.id)) && onlyCreates(["createdAt", "name", "participantNames", "availability", "timeslots"]) && isValidMeetup(request.resource.data);
    }

    match /meetups/{meetupId}/participants/{participantId} {
      // Allow anyone to read participants
      allow read: if true;

      // Allow updating availability if
      // - the request only changes the availability field
      // - the resulting availability is valid
      allow update: if onlyChanges(["availability"]) 
      && isValidParticipant(request.resource.data);

      // Allow creating participant if 
      // - the user is creating a valid participant
      // - the user doesn't already exist in the participants list
      allow create: if onlyCreates(["availability", "createdAt", "name"]) 
      && isValidParticipant(request.resource.data) 
      && !(request.resource.data.name in getParticipantNames(meetupId));
    }
  }
}